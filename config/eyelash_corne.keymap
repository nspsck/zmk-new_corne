#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&mt {
    tapping-term-ms = <180>;
    quick-tap-ms = <180>;
    require-prior-idle-ms = <150>;
    flavor = "tap-preferred";
    hold-trigger-key-positions = <14 15 16 17 23 24 25 26>;
    hold-trigger-on-release;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        mouse_click: mouse_click {
            compatible = "zmk,behavior-hold-tap";
            label = "MOUSE_CLICK";
            #binding-cells = <2>;
            tapping-term-ms = <500>;
            flavor = "balanced";
            hold-trigger-key-positions = <20>;
            hold-trigger-on-release;
            bindings = <&mkp>, <&mkp>;
        };

        mod_kp: mod_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_KP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <130>;
            flavor = "hold-preferred";
            quick-tap-ms = <130>;
            hold-trigger-key-positions = <42 44 45 47 43 46>;
        };

        to_kp: to_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "TO_KP";
            bindings = <&to>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            flavor = "tap-preferred";
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <22 23 24 25 26 7 8 9 10 11 36 37 38 39 40>; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <2 3 4 5 15 16 17 18 30 31 32 33 1 14 29>; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };

        mt_pinky: mt_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_PINKY";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <14 26>;
            hold-trigger-on-release;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "CMKDH";
            bindings = <
&kp ESCAPE  &kp Q             &kp W        &kp F             &kp P         &kp B                                    &msc SCRL_UP                     &kp J      &kp L         &kp U          &kp Y        &kp SEMI          &kp BSPC
&kp TAB     &hml LGUI A  &hml LALT R  &hml LCTRL S      &hml LSHIFT T  &kp G                    &msc SCRL_LEFT  &kp C_PP        &msc SCRL_RIGHT  &kp M      &hmr RSHIFT N  &hmr RCTRL E   &hmr RALT I  &hmr RGUI O  &kp SQT
&kp EQUAL   &kp Z             &kp X        &kp C             &kp D         &kp V      &kp C_MUTE                    &msc SCRL_DOWN                   &kp K      &kp H         &kp COMMA      &kp DOT      &kp FSLH          &kp MINUS
                                           &mod_kp 5 DELETE  &mo 2         &kp SPACE                                                                 &kp ENTER  &mo 3         &to_kp 1 CAPS
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        layer_1 {
            display-name = "QWERTY";
            bindings = <
&kp ESCAPE  &kp Q             &kp W        &kp E             &kp R         &kp T                                    &msc SCRL_UP                       &kp Y      &kp U         &kp I          &kp O        &kp P                &kp BSPC
&kp TAB     &hml LGUI A  &hml LALT S  &hml LCTRL D      &hml LSHIFT F  &kp G                    &msc SCRL_LEFT  &kp C_PP        &msc SCRL_RIGHT  &kp H      &hmr RSHIFT J  &hmr RCTRL K   &hmr RALT L  &hmr RGUI SEMI  &kp SQT
&kp EQUAL   &kp Z             &kp X        &kp C             &kp V         &kp B      &kp C_MUTE                    &msc SCRL_DOWN                     &kp N      &kp M         &kp COMMA      &kp DOT      &kp FSLH             &kp MINUS
                                           &mod_kp 5 DELETE  &mo 2         &kp SPACE                                                                   &kp ENTER  &mo 3         &to_kp 0 CAPS
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        layer_2 {
            display-name = "SYMNUM";
            bindings = <
&kp LS(TILDE)  &kp LS(EXCL)       &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)   &kp LS(PRCNT)                    &trans          &kp LS(CARET)  &kp LS(AMPS)   &kp LS(STAR)  &kp PIPE      &kp BSLH           &none
&kp GRAVE      &hml LGUI N1    &hml LALT N2  &hml LCTRL N3  &hml LSHIFT N4  &kp N5                   &trans  &trans  &trans  &kp N6         &hmr RSHIFT N7  &hmr RCTRL N8  &hmr RALT N9  &hmr RGUI N0  &none
&none          &none              &kp LBKT      &kp LBRC       &kp LPAR       &none          &trans            &trans          &none          &kp RPAR       &kp RBRC      &kp RBKT      &none              &none
                                                &none          &trans         &none                                            &kp SPACE      &trans         &none
            >;
        };

        layer_3 {
            display-name = "FN";
            bindings = <
&none  &kp F1             &kp F2        &kp F3       &kp F4         &kp F5                        &trans          &kp C_MUTE    &kp C_VOL_DN     &kp C_VOL_UP  &kp C_PLAY_PAUSE  &soft_off     &none
&none  &hml LGUI F6  &hml LALT F7  &hml LCTRL F8    &hml LSHIFT F9  &kp F10               &trans  &trans  &trans  &kp LEFT      &hmr RSHIFT DOWN  &hmr RCTRL UP  &hmr RALT RIGHT   &kp LGUI      &none
&none  &kp F11            &kp F12       &none        &none          &bt BT_CLR  &trans            &trans          &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3      &bt BT_SEL 4  &none
                                        &none        &trans         &none                                         &none         &trans           &none
            >;
        };

        layer_4 {
            display-name = "MOUSE";
            bindings = <
&kp ESC      &none            &mkp MB2        &mmv MOVE_UP     &mkp MB1         &kp PRINTSCREEN                    &trans          &mkp MCLK        &kp KP_N7         &kp KP_N8        &kp KP_N9        &kp KP_NUMLOCK        &kp LC(LA(DEL))
&none        &msc SCRL_RIGHT  &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT  &msc SCRL_UP               &trans  &trans  &trans  &mkp MB1         &mt LSHIFT KP_N4  &mt LCTRL KP_N5  &mt LALT KP_N6  &mt_pinky LGUI KP_N0  &rgb_ug RGB_TOG
&bootloader  &msc SCRL_LEFT   &mkp MB4        &mkp MCLK        &mkp MB5         &msc SCRL_DOWN   &trans            &trans          &mkp MB2         &kp KP_N1         &kp KP_N2        &kp KP_N3        &kp KP_DOT            &bootloader
                                              &rgb_ug RGB_BRI  &trans           &rgb_ug RGB_EFF                                    &rgb_ug RGB_EFR  &trans            &rgb_ug RGB_BRD
            >;
        };

        layer_5 {
            display-name = "WM";
            bindings = <
&none  &kp LS(LG(N1))                    &kp LS(LG(N2))                     &kp LS(LG(N3))                     &kp LS(LG(N4))                     &kp LS(LG(N5))                                     &none         &kp LS(LG(N6))                   &kp LS(LG(N7))                   &kp LS(LG(N8))                    &kp LS(LG(N9))                     &kp LS(LG(N0))                     &none
&none  &kp LG(N1)                        &kp LG(N2)                         &kp LG(N3)                         &kp LG(N4)                         &kp LG(N5)                                  &none  &none  &none  &kp LG(N6)                       &kp LG(N7)                       &kp LG(N8)                        &kp LG(N9)                         &kp LG(N0)                         &none
&none  &rgb_ug RGB_COLOR_HSB(15,100,50)  &rgb_ug RGB_COLOR_HSB(145,100,50)  &rgb_ug RGB_COLOR_HSB(301,100,50)  &rgb_ug RGB_COLOR_HSB(280,100,50)  &rgb_ug RGB_COLOR_HSB(238,100,50)  &none           &none         &rgb_ug RGB_COLOR_HSB(0,100,50)  &rgb_ug RGB_COLOR_HSB(35,99,49)  &rgb_ug RGB_COLOR_HSB(65,100,50)  &rgb_ug RGB_COLOR_HSB(136,100,50)  &rgb_ug RGB_COLOR_HSB(170,100,50)  &none
                                                                            &trans                             &none                              &none                                                            &none                            &none                            &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        MOUSENUMPAD {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
