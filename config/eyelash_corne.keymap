#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESCAPE  &kp Q       &kp W        &kp E       &kp R         &kp T                                    &msc SCRL_UP                       &kp Y      &kp U         &kp I       &kp O        &kp P          &kp BSPC
&kp TAB     &mt LGUI A  &mt LCTRL S  &mt LALT D  &mt LSHIFT F  &kp G                    &msc SCRL_LEFT  &kp C_PLAY_PAUSE  &msc SCRL_RIGHT  &kp H      &mt RSHIFT J  &mt RALT K  &mt RCTRL L  &mt RGUI SEMI  &kp SQT
&kp EQUAL   &kp Z       &kp X        &kp C       &kp V         &kp B      &kp C_MUTE                    &msc SCRL_DOWN                     &kp N      &kp M         &kp COMMA   &kp DOT      &kp FSLH       &kp MINUS
                                     &kp DELETE  &mo 1         &kp SPACE                                                                   &kp ENTER  &mo 2         &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        layer_1 {
            bindings = <
&kp LS(TILDE)  &kp LS(EXCL)  &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)   &kp LS(PRCNT)                    &trans          &kp LS(CARET)  &kp LS(AMPS)   &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(PIPE)
&kp GRAVE      &mt LGUI N1   &mt LCTRL N2  &mt LALT N3    &mt LSHIFT N4  &kp N5                   &trans  &trans  &trans  &kp N6         &mt RSHIFT N7  &mt RALT N8   &mt RCTRL N9  &mt RGUI N0   &kp BSLH
&kp EQUAL      &none         &kp BSPC      &none          &kp LBKT       &kp LS(LPAR)   &trans            &trans          &kp LS(RPAR)   &kp RBKT       &kp COMMA     &kp DOT       &none         &kp MINUS
                                           &none          &trans         &none                                            &kp SPACE      &trans         &none
            >;
        };

        layer_2 {
            bindings = <
&kp F1  &kp F2                &kp F3         &kp F4            &kp F5                &kp F6                        &trans          &kp F7        &kp F8           &kp F9        &kp F10          &kp F11           &kp F12
&none   &mt LGUI C_VOLUME_UP  &mt LCTRL END  &mt LALT PAGE_UP  &mt LSHIFT PAGE_DOWN  &kp HOME              &trans  &trans  &trans  &kp LEFT      &mt RSHIFT DOWN  &mt LALT UP   &mt RCTRL RIGHT  &mt RGUI C_MUTE   &none
&none   &kp C_VOLUME_DOWN     &none          &bt BT_PRV        &bt BT_NXT            &bt BT_CLR  &trans            &trans          &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3     &kp C_PLAY_PAUSE  &none
                                             &none             &trans                &none                                         &none         &trans           &none
            >;
        };

        layer_3 {
            bindings = <
&kp ESC  &trans           &mkp MB1        &mmv MOVE_UP     &mkp MB2         &trans                             &trans          &mkp MCLK        &kp N7         &kp N8           &kp N9        &trans       &kp LC(LA(DEL))
&trans   &msc SCRL_RIGHT  &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT  &msc SCRL_UP               &trans  &trans  &trans  &mkp MB1         &mt RSHIFT N4  &mt RALT N5      &mt RCTRL N6  &mt RGUI N0  &rgb_ug RGB_TOG
&trans   &msc SCRL_LEFT   &mkp MB4        &mkp MCLK        &mkp MB5         &msc SCRL_DOWN   &trans            &trans          &mkp MB2         &kp N1         &kp N2           &kp N3        &trans       &rgb_ug RGB_COLOR_HSB(183,43,62)
                                          &rgb_ug RGB_BRI  &trans           &rgb_ug RGB_EFF                                    &rgb_ug RGB_EFR  &trans         &rgb_ug RGB_BRD
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        MOUSENUMPAD {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
